import{_ as c,r as p,o as l,c as i,a as n,b as s,d as a,w as u,e}from"./app-f4290375.js";const k={},r=e('<h3 id="基于entityframeworkcore和lucene-net实现的全文检索搜索引擎-码数鲁森库" tabindex="-1"><a class="header-anchor" href="#基于entityframeworkcore和lucene-net实现的全文检索搜索引擎-码数鲁森库" aria-hidden="true">#</a> 基于EntityFrameworkCore和Lucene.NET实现的全文检索搜索引擎(码数鲁森库)</h3><p><a href="https://gitee.com/masuit/Masuit.LuceneEFCore.SearchEngine"><img src="https://gitee.com/static/images/logo-black.svg" height="32"></a> <a href="https://github.com/ldqk/Masuit.LuceneEFCore.SearchEngine"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Font_Awesome_5_brands_github.svg/54px-Font_Awesome_5_brands_github.svg.png" height="36"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/GitHub_logo_2013.svg/128px-GitHub_logo_2013.svg.png" height="28"></a><br><strong>仅70KB的代码量！新手友好。</strong> 基于EntityFrameworkCore和Lucene.NET实现的全文检索搜索引擎，可轻松实现高性能的全文检索，支持添加自定义词库，自定义同义词和同音词，搜索分词默认支持同音词搜索。可以轻松应用于任何基于EntityFrameworkCore的实体框架数据库。<br><strong><code>注意：该项目仅适用于单体项目的简单搜索场景，不适用于分布式应用以及复杂的搜索场景，分布式应用请考虑使用大型的搜索引擎中间件做支撑，如：ElasticSearch，或考虑数据库的正则表达式查询</code></strong></p>',2),d={href:"http://masuit.com/1437",target:"_blank",rel:"noopener noreferrer"},m={href:"https://masuit.com/s?wd=%E4%BC%9A%E5%A3%B0%E4%BC%9A%E5%BD%B1+TeamViewer",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"项目开发模式：日常代码积累+网络搜集",-1),g={href:"https://github.com/996icu/996.ICU/blob/master/LICENSE",target:"_blank",rel:"noopener noreferrer"},b=n("img",{src:"https://img.shields.io/badge/license-Anti 996-blue.svg",alt:"LICENSE"},null,-1),h={href:"https://www.nuget.org/packages/Masuit.LuceneEFCore.SearchEngine_string",target:"_blank",rel:"noopener noreferrer"},y=n("img",{src:"https://img.shields.io/nuget/v/Masuit.LuceneEFCore.SearchEngine_string.svg",alt:"nuget"},null,-1),w={href:"https://www.nuget.org/packages/Masuit.LuceneEFCore.SearchEngine_string",target:"_blank",rel:"noopener noreferrer"},f=n("img",{src:"https://img.shields.io/nuget/dt/Masuit.LuceneEFCore.SearchEngine_string.svg",alt:"nuget"},null,-1),x=n("img",{src:"https://img.shields.io/github/languages/code-size/ldqk/Masuit.LuceneEFCore.SearchEngine.svg",alt:"codeSize"},null,-1),E=n("img",{src:"https://img.shields.io/github/languages/top/ldqk/Masuit.LuceneEFCore.SearchEngine.svg",alt:"language"},null,-1),_=e('<h3 id="请注意" tabindex="-1"><a class="header-anchor" href="#请注意" aria-hidden="true">#</a> 请注意：</h3><p>一旦使用本开源项目以及引用了本项目或包含本项目代码的公司因为违反劳动法（包括但不限定非法裁员、超时用工、雇佣童工等）在任何法律诉讼中败诉的，一经发现，本项目作者有权利追讨本项目的使用费（<strong>公司工商注册信息认缴金额的2-5倍作为本项目的授权费</strong>），或者直接不允许使用任何包含本项目的源代码！任何性质的<code>外包公司</code>或<code>996公司</code>需要使用本类库，请联系作者进行商业授权！其他企业或个人可随意使用不受限。996那叫用人，也是废人。8小时工作制才可以让你有时间自我提升，将来有竞争力。反对996，人人有责！</p><p>⭐⭐⭐喜欢这个项目的话就Star、Fork、Follow素质三连关♂注一下吧⭐⭐⭐</p><h2 id="stargazers-over-time" tabindex="-1"><a class="header-anchor" href="#stargazers-over-time" aria-hidden="true">#</a> Stargazers over time</h2><img src="https://starchart.cc/ldqk/Masuit.LuceneEFCore.SearchEngine.svg"><h3 id="项目特点" tabindex="-1"><a class="header-anchor" href="#项目特点" aria-hidden="true">#</a> 项目特点</h3><ol><li>基于原生Lucene实现，轻量高效，毫秒级响应</li><li>与EFCore无缝接入，配置代码少，可轻松接入现有项目</li><li>支持添加自定义词库，支持同义词和同音词检索，支持添加自定义同义词和同音词</li><li>不支持分布式应用，若你能解决分布式场景中索引库的同步问题，可以选择</li></ol><h3 id="为什么没有集成到masuit-tools这个库" tabindex="-1"><a class="header-anchor" href="#为什么没有集成到masuit-tools这个库" aria-hidden="true">#</a> 为什么没有集成到Masuit.Tools这个库？</h3>',8),q={href:"https://github.com/ldqk/Masuit.Tools",title:"Masuit.Tools",target:"_blank",rel:"noopener noreferrer"},I=e(`<h3 id="为什么有这个库-现成的elasticsearch不好么" tabindex="-1"><a class="header-anchor" href="#为什么有这个库-现成的elasticsearch不好么" aria-hidden="true">#</a> 为什么有这个库？现成的ElasticSearch不好么？</h3><p>ES确实很好用，但我想的是还有很多的小站没必要上那么重量级的中间件，于是原生lucene库不失为一种好的选择，然而原生LuceneAPI的学习成本也相对较高，所以专门封装了这个库。</p><h3 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h3><h4 id="entityframeworkcore基架搭建" tabindex="-1"><a class="header-anchor" href="#entityframeworkcore基架搭建" aria-hidden="true">#</a> EntityFrameworkCore基架搭建</h4><p>新建项目，并安装EntityFrameworkCore相关库以及全文检索包：</p><p>根据你的项目情况，选择对应的后缀版本，提供了4个主键版本的库，后缀为int的代表主键是基于int自增类型的，后缀为Guid的代表主键是基于Guid类型的...</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PM<span class="token operator">&gt;</span> Install-Package Masuit.LuceneEFCore.SearchEngine_int
PM<span class="token operator">&gt;</span> Install-Package Masuit.LuceneEFCore.SearchEngine_long
PM<span class="token operator">&gt;</span> Install-Package Masuit.LuceneEFCore.SearchEngine_string
PM<span class="token operator">&gt;</span> Install-Package Masuit.LuceneEFCore.SearchEngine_Guid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照套路我们需要首先搭建好EntityFrameworkCore的基架，即数据库上下文和实体对象；</p><p>准备数据库上下文对象：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">DataContext</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptions<span class="token punctuation">&lt;</span>DataContext<span class="token punctuation">&gt;</span></span> options<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptionsBuilder</span> optionsBuilder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnConfiguring</span><span class="token punctuation">(</span>optionsBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        optionsBuilder<span class="token punctuation">.</span><span class="token function">UseQueryTrackingBehavior</span><span class="token punctuation">(</span>QueryTrackingBehavior<span class="token punctuation">.</span>TrackAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>Post<span class="token punctuation">&gt;</span></span> Post <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备实体对象，这里开始需要注意了，要想这个库的数据被全文检索，需要符合两个条件：</p><ol><li>实体必须继承自LuceneIndexableBaseEntity；</li><li>需要被检索的字段需要被LuceneIndexAttribute所标记。</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 文章</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;Post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Post</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">LuceneIndexableBaseEntity</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        PostDate <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 标题</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">Required</span><span class="token punctuation">(</span>ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;文章标题不能为空！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LuceneIndex<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 作者</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>Required<span class="token punctuation">,</span> <span class="token function">MaxLength</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;作者名最长支持24个字符！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LuceneIndex<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Author <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 内容</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">Required</span><span class="token punctuation">(</span>ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;文章内容不能为空！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">LuceneIndex</span><span class="token punctuation">(</span>IsHtml <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Content <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 发表时间</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> PostDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 作者邮箱</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">Required</span><span class="token punctuation">(</span>ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;作者邮箱不能为空！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LuceneIndex<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 标签</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">StringLength</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;标签最大允许255个字符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LuceneIndex<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Label <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 文章关键词</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">StringLength</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;文章关键词最大允许255个字符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LuceneIndex<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Keyword <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LuceneIndexAttribute对应的4个自定义参数：</p><ol><li>Name：自定义索引字段名，默认为空；</li><li>Index：索引行为，默认为Field.Index.ANALYZED；</li><li>Store：是否被存储到索引库，默认为Field.Store.YES；</li><li>IsHtml：是否是html，默认为false，若标记为true，则在索引解析时会先清空其中的html标签。</li></ol><h4 id="为什么实体类要继承luceneindexablebaseentity" tabindex="-1"><a class="header-anchor" href="#为什么实体类要继承luceneindexablebaseentity" aria-hidden="true">#</a> 为什么实体类要继承LuceneIndexableBaseEntity？</h4><p>LuceneIndexableBaseEntity源代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 需要被索引的实体基类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LuceneIndexableBaseEntity</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ILuceneIndexable</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 主键id</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">LuceneIndex</span><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;Id&quot;</span><span class="token punctuation">,</span> Store <span class="token operator">=</span> Field<span class="token punctuation">.</span>Store<span class="token punctuation">.</span>YES<span class="token punctuation">,</span> Index <span class="token operator">=</span> Field<span class="token punctuation">.</span>Index<span class="token punctuation">.</span>NOT_ANALYZED<span class="token punctuation">)</span><span class="token punctuation">,</span> Key<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 索引唯一id</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">LuceneIndex</span><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;IndexId&quot;</span><span class="token punctuation">,</span> Store <span class="token operator">=</span> Field<span class="token punctuation">.</span>Store<span class="token punctuation">.</span>YES<span class="token punctuation">,</span> Index <span class="token operator">=</span> Field<span class="token punctuation">.</span>Index<span class="token punctuation">.</span>NOT_ANALYZED<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">NotMapped</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> IndexId
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=&gt;</span> <span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> Id<span class="token punctuation">;</span>
        <span class="token keyword">set</span>
        <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 转换成Lucene文档</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">Document</span> <span class="token function">ToDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 将实体对象转换成Lucene文档的逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实体继承自LuceneIndexableBaseEntity后，方便封装的Lucene可以直接调用ToDocument方法进行存储，同时，主键Id和IndexId需要参与Lucene索引文档的唯一标识(但IndexId不会生成到数据库)。</p><h4 id="搜索引擎配置、创建索引、导入自定义词库等" tabindex="-1"><a class="header-anchor" href="#搜索引擎配置、创建索引、导入自定义词库等" aria-hidden="true">#</a> 搜索引擎配置、创建索引、导入自定义词库等</h4><p>Startup.cs</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DataContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>db <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        db<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span><span class="token string">&quot;Data Source=.;Initial Catalog=MyBlogs;Integrated Security=True&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 配置数据库上下文</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSearchEngine</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DataContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LuceneIndexerOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Path <span class="token operator">=</span> <span class="token string">&quot;lucene&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 依赖注入搜索引擎，并配置索引库路径</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IHostingEnvironment</span> env<span class="token punctuation">,</span> <span class="token class-name">ISearchEngine</span> searchEngine<span class="token punctuation">,</span> <span class="token class-name">LuceneIndexerOptions</span> luceneIndexerOptions<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// 导入自定义词库，支持中英文词</span>
    KeywordsManager<span class="token punctuation">.</span><span class="token function">AddWords</span><span class="token punctuation">(</span><span class="token string">&quot;面向对象编程语言&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    KeywordsManager<span class="token punctuation">.</span><span class="token function">AddWords</span><span class="token punctuation">(</span><span class="token string">&quot;懒得勤快&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    KeywordsManager<span class="token punctuation">.</span><span class="token function">AddWords</span><span class="token punctuation">(</span><span class="token string">&quot;码数科技&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    KeywordsManager<span class="token punctuation">.</span><span class="token function">AddWords</span><span class="token punctuation">(</span><span class="token string">&quot;Tree New Bee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    KeywordsManager<span class="token punctuation">.</span><span class="token function">AddWords</span><span class="token punctuation">(</span><span class="token string">&quot;男♂能可贵&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token comment">// 导入自定义同义词，支持中英文词</span>
    KeywordsManager<span class="token punctuation">.</span><span class="token function">AddSynonyms</span><span class="token punctuation">(</span><span class="token string">&quot;RDM&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Redis Desktop Manager&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    KeywordsManager<span class="token punctuation">.</span><span class="token function">AddSynonyms</span><span class="token punctuation">(</span><span class="token string">&quot;RDM&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Remote Desktop Manager&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    KeywordsManager<span class="token punctuation">.</span><span class="token function">AddSynonyms</span><span class="token punctuation">(</span><span class="token string">&quot;VS&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Visual Studio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    KeywordsManager<span class="token punctuation">.</span><span class="token function">AddSynonyms</span><span class="token punctuation">(</span><span class="token string">&quot;Visual Studio&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;宇宙最强IDE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    KeywordsManager<span class="token punctuation">.</span><span class="token function">AddSynonyms</span><span class="token punctuation">(</span><span class="token string">&quot;VS&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Video Studio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    KeywordsManager<span class="token punctuation">.</span><span class="token function">AddSynonyms</span><span class="token punctuation">(</span><span class="token string">&quot;难能可贵&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;男♂能可贵&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 提问：以上示例配置了近义词：VS-&gt;Visual Studio和Visual Studio-&gt;宇宙最强IDE？那么分词时VS是否能够找到间接近义词“宇宙最强IDE”？</span>
    <span class="token comment">// 答案是不能，为什么不能？近义词查找并没有实现递归查找，为什么不做递归查找？因为近义词库是完全不可控的动态配置，如果做了递归查找，词库的配置不当很有可能造成死递归，所以，如果需要让VS和“宇宙最强IDE”同义，则需要再单独配置</span>
        
    <span class="token comment">// 初始化索引库，建议结合定时任务使用，定期刷新索引库</span>
    <span class="token class-name"><span class="token keyword">string</span></span> lucenePath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span>ContentRootPath<span class="token punctuation">,</span> luceneIndexerOptions<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>lucenePath<span class="token punctuation">)</span> <span class="token operator">||</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>lucenePath<span class="token punctuation">)</span><span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 创建索引</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;索引库不存在，开始自动创建Lucene索引库...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        searchEngine<span class="token punctuation">.</span><span class="token function">CreateIndex</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
           <span class="token keyword">nameof</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span>Post<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> searchEngine<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Post<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> i<span class="token punctuation">.</span>Status <span class="token operator">!=</span> Status<span class="token punctuation">.</span>Pended<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除不需要被索引的数据</span>
        searchEngine<span class="token punctuation">.</span>LuceneIndexer<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;索引库创建完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>同义词支持正向和反向查找，如配置了：<code>KeywordsManager.AddSynonyms(&quot;地大物博&quot;,&quot;弟大勿勃&quot;)</code>和<code>KeywordsManager.AddSynonyms(&quot;弟大勿勃&quot;,&quot;地大物博&quot;)</code>是等效的，只需要其中一条即可</strong><br> HomeController.cs</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;[controller]/[action]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Controller</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ISearchEngine<span class="token punctuation">&lt;</span>DataContext<span class="token punctuation">&gt;</span></span> _searchEngine<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILuceneIndexer</span> _luceneIndexer<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">HomeController</span><span class="token punctuation">(</span><span class="token class-name">ISearchEngine<span class="token punctuation">&lt;</span>DataContext<span class="token punctuation">&gt;</span></span> searchEngine<span class="token punctuation">,</span> <span class="token class-name">ILuceneIndexer</span> luceneIndexer<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _searchEngine <span class="token operator">=</span> searchEngine<span class="token punctuation">;</span>
        _luceneIndexer <span class="token operator">=</span> luceneIndexer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 搜索</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>s<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>关键词<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>page<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>第几页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>size<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>页大小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> page<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> size<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//var result = _searchEngine.ScoredSearch&lt;Post&gt;(new SearchOptions(s, page, size, &quot;Title,Content,Email,Author&quot;));</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> _searchEngine<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ScoredSearch</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Post<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SearchOptions</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> page<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Post</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 创建索引</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//_searchEngine.CreateIndex();//扫描所有数据表，创建符合条件的库的索引</span>
        _searchEngine<span class="token punctuation">.</span><span class="token function">CreateIndex</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建指定的数据表的索引</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 添加索引</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddIndex</span><span class="token punctuation">(</span><span class="token class-name">Post</span> p<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 添加到数据库并更新索引</span>
        _searchEngine<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Post<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _searchEngine<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//_luceneIndexer.Add(p); //单纯的只添加索引库</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 删除索引</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>HttpDelete<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DeleteIndex</span><span class="token punctuation">(</span><span class="token class-name">Post</span> post<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//从数据库删除并更新索引库</span>
        <span class="token class-name">Post</span> p <span class="token operator">=</span> _searchEngine<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Post<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _searchEngine<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Post<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _searchEngine<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//_luceneIndexer.Delete(p);// 单纯的从索引库移除</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 更新索引库</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>HttpPatch<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateIndex</span><span class="token punctuation">(</span><span class="token class-name">Post</span> post<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//从数据库更新并同步索引库</span>
        <span class="token class-name">Post</span> p <span class="token operator">=</span> _searchEngine<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Post<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// update...</span>
        _searchEngine<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Post<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _searchEngine<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//_luceneIndexer.Update(p);// 单纯的更新索引库</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="关于更新索引" tabindex="-1"><a class="header-anchor" href="#关于更新索引" aria-hidden="true">#</a> 关于更新索引</h4><p>要在执行任何CRUD操作后更新索引，只需从ISearchEngine调用SaveChanges()方法，而不是从DataContext调用SaveChanges()。 这才会更新索引，然后会自动调用DataContexts的SaveChanges()方法。如果直接调用DataContexts的SaveChanges()方法，只会保存到数据库，而不会更新索引库。</p><h4 id="关于搜索结果" tabindex="-1"><a class="header-anchor" href="#关于搜索结果" aria-hidden="true">#</a> 关于搜索结果</h4><p>搜索返回IScoredSearchResultCollection，其中包括执行搜索所花费的时间，命中总数以及每个包含的对象的结果集以及在搜索中匹配度的数量。</p>`,28),S=e('<h4 id="演示项目" tabindex="-1"><a class="header-anchor" href="#演示项目" aria-hidden="true">#</a> 演示项目</h4><p><a href="/WebSearchDemo" title="demo">点击这里</a></p><h3 id="推荐项目" tabindex="-1"><a class="header-anchor" href="#推荐项目" aria-hidden="true">#</a> 推荐项目</h3>',3),C={href:"https://github.com/ldqk/Masuit.Tools",title:"Masuit.Tools",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/ldqk/Masuit.MyBlogs",title:"Masuit.MyBlogs",target:"_blank",rel:"noopener noreferrer"};function M(D,P){const t=p("ExternalLinkIcon"),o=p("font");return l(),i("div",null,[r,n("p",null,[n("a",d,[s("官网页面"),a(t)]),s(" | "),n("a",m,[s("实际应用案例体验"),a(t)])]),v,n("p",null,[n("a",g,[b,a(t)]),s(),n("a",h,[y,a(t)]),s(),n("a",w,[f,a(t)]),s(),x,s(),E]),_,n("p",null,[s("因为这个项目又引入了几个Lucene相关的库，如果集成到"),n("a",q,[s("Masuit.Tools"),a(t)]),s("，这必将给原来的项目增加了更多的引用包，使用过程中也有可能没有使用Lucene的场景，这就造成了项目更加的臃肿，所以做了个新的项目。")]),I,a(o,{color:"#f00"},{default:u(()=>[s("特别注意：单元测试中使用内存RAM目录进行索引和搜索，但这仅用于测试目的，真实生产环境应使用物理磁盘的目录。")]),_:1}),S,n("p",null,[s(".NET万能框架："),n("a",C,[s("Masuit.Tools"),a(t)])]),n("p",null,[s("开源博客系统："),n("a",L,[s("Masuit.MyBlogs"),a(t)])])])}const F=c(k,[["render",M],["__file","SearchEngine.html.vue"]]);export{F as default};
